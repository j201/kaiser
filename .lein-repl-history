exit
(+ 1 1)
exit
(source max)
(source I)
(doc I)
I
(use clojure.core.typed)
(require clojure.core.typed :refer)
(assoc [0 1] 0 1)
([1 2] 1)
(nth [1 2] 1)
(get [1 2] 1)
(nth [1 2] 2)
(get [1 2] 2)
(mod 1.1 1.2)
(int 1.1)
(type 1.1)
(type 1
)
(type (mod 1 2))
(type (int 1))
exit
(use `core.typed(
(use `core.typed)
(use `(core.typed))
(cf [1 2])
(use '(core.typed))
ann
(use 'clojure.core.typed)
ann
(cf [1 2])
(cf (assoc [1 2] 0 4))
(def-alias Score '[AnyInteger AnyInteger])
(ann test-score Score)
(def test-score [1 2])
(cf (assoc test-score 0 4))
(ann test-score Score)
(cf (assoc test-score 0 4))
test-score
(cf test-score)
(ann test-score Score) (def test-score [1 2])
(cf test-score)
(cf (ann test-score Score)) (cf (def test-score [1 2]))
(cf (def test-score [1 2]))
(cf (def test-score2 [1 2]))
(cf (ann test-score2 [1 2])
)
(cf (ann test-score2 Score))
test-score2
(cf test-score2)
(cf (assoc test-score2 0 4))
(cf (def-alias Score '[AnyInteger AnyInteger]))
(cf (assoc test-score2 0 4))
(cf (ann score-result ))
(cf (ann score-result Score))
(cf (def score-result (assoc test-score2 0 4)))
(cf score-result)
(odd? 1)
(cf (+ 1 AnyInteger))
(cf (+ 1 1))
(cf (ann my-int (U (Value 0) (Value 1))))
(cf (+ my-int 1))
(cf (def my-int 0))
(cf (+ my-int 1))
(cf (assoc test-score2 my-int 4)\)
(cf (assoc test-score2 my-int 4))
test-score2
(cf (ann test-score2 Score))
(cf (assoc test-score2 my-int 4))
(cf (def-alias Score '[AnyInteger AnyInteger]))
(cf (assoc test-score2 my-int 4))
(cf assoc)
(cf (assoc test-score2 0 4))
(cf (def-alias Score '[AnyInteger AnyInteger]))
(cf (ann test-score2 Score))
(cf (assoc test-score2 0 4))
(cf (assoc test-score2 1 4))
(cf (ann numvec (Vec AnyInteger)))
(assoc [] 1 2)
(def-alias Score (I (Vec AnyInteger) (ExactCount 1)))
(cf (assoc test-score2 1 4))
(cf (ann test-score2 Score))
(cf (assoc test-score2 my-int 4))
(def-alias Score (I (Vec AnyInteger) (ExactCount 1)))
(cf (def-alias Score (I (Vec AnyInteger) (ExactCount 1))))
(cf (assoc test-score2 my-int 4))
(cf (ann my-int (U (Value 0) (Value 1))))
(cf (def my-int 0))
(cf (assoc test-score2 my-int 4))
(cf (def-alias Score (I (Vec AnyInteger) (ExactCount 2))))
(cf (assoc test-score2 my-int 4))
(cf (assoc test-score2 2 4))
(cf (assoc test-score2 1 4))
(cf (ann test-score2 Score))
(cf (assoc test-score2 1 4))
(cf (def-alias Score (I (Vec AnyInteger) (ExactCount 2))))
(cf (assoc test-score2 1 4))
(cf (assoc test-score2 0 4))
